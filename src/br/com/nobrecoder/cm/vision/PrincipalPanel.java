package br.com.nobrecoder.cm.vision;

import java.awt.GridLayout;

import javax.swing.JOptionPane;
import javax.swing.JPanel;

import br.com.nobrecoder.cm.model.Board;

/**@Objetivo
 * Essa classe Ã© usada para gerar um paneil principal que servirÃ¡ como container para toda a janela da nossa aplicaÃ§Ã£o...
 * */
@SuppressWarnings("serial")
public class PrincipalPanel extends JPanel{ //Essa classe extende de JPanel...
	
	//MÃ©todo Constructor
	public PrincipalPanel(Board board) { //Recebe um tabuleiro como parÃ¢metro visto que precisaremos das informaÃ§Ãµes de colunas, linhas e bombas que um jogo precisarÃ¡ ter, e essas informaÃ§Ãµes estÃ£o todas no tabuleiro.
		setLayout(new GridLayout(board.getRows(), board.getColumns())); //As linhas e colunas do tabuleiro serÃ£o usadas para gerar um gri
		
		board.forEachFields(c -> add(new ButtonField(c))); //NÃ³s criamos na classe "board" um mÃ©todo que recebe um consumer que irÃ¡ iterar sobre cada campo do tabuleiro adicionando um novo botÃ£o ao painel principal por atravÃ©s do mÃ©todo "add" de JPainel...
		
		board.registerObservers(e -> {
			if(board.goalAchieved()) {				
				JOptionPane.showMessageDialog(this, "YOU WIN!!! ðŸ˜ƒ");
			} else {				
				JOptionPane.showMessageDialog(this, "YOU LOSE ðŸ˜ž");
			}
		});
		
	}
}
